name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Check formatting with black
      run: black --check app/ tests/
    
    - name: Check import sorting with isort
      run: isort --check-only app/ tests/
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: mypy app/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ --severity-level medium
    
    - name: Check dependencies with safety
      run: |
        pip install -r requirements.txt
        safety check --json || true
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Check coverage threshold
      run: |
        coverage report --fail-under=75
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t autocash-ultimate:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm autocash-ultimate:${{ github.sha }} python -c "import app; print('Build OK')"

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start application
      run: |
        # Create minimal .env for testing
        cat > .env << EOF
        SECRET_KEY=test_secret_key_min_32_characters_long_for_ci
        ENCRYPTION_KEY=test_encryption_key_min_32_chars
        DATABASE_URL=sqlite:///./test.db
        ENVIRONMENT=development
        DEBUG=true
        EOF
        
        # Start app in background
        python -m app.main &
        APP_PID=$!
        
        # Wait for app to be ready
        sleep 5
        
        # Test root endpoint
        curl -f http://localhost:8000/ || exit 1
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Kill app
        kill $APP_PID
      timeout-minutes: 2

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, smoke-test]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Smoke Tests: ${{ needs.smoke-test.result }}"
        
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ] || \
           [ "${{ needs.smoke-test.result }}" != "success" ]; then
          echo "❌ CI Failed"
          exit 1
        fi
        
        echo "✅ CI Passed"
