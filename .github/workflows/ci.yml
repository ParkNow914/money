name: CI

on:
  push:
    branches: [ main, develop, copilot/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Black (formatter check)
      run: black --check app/ tests/
      continue-on-error: true
    
    - name: Run isort (import sorting check)
      run: isort --check-only app/ tests/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (SAST)
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (dependency check)
      run: safety check --json
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=75
    
    - name: Upload coverage to artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml
    
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
      continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: false
        tags: autocash-ultimate:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker build -f docker/Dockerfile -t autocash-ultimate:test .
        docker run --rm autocash-ultimate:test python -c "import app.main; print('✓ App imports successfully')"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services with docker-compose
      run: |
        docker-compose -f docker/docker-compose.yml up -d
        sleep 10
    
    - name: Wait for service to be healthy
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Test API endpoints
      run: |
        # Test root endpoint
        curl -f http://localhost:8000/ | jq .
        
        # Test health endpoint
        curl -f http://localhost:8000/health | jq .
        
        # Test metrics endpoint
        curl -f http://localhost:8000/api/metrics
        
        # Test stats endpoint
        curl -f http://localhost:8000/api/stats | jq .
    
    - name: View logs on failure
      if: failure()
      run: |
        docker-compose -f docker/docker-compose.yml logs
    
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker/docker-compose.yml down -v

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, integration-test]
    if: always()
    
    steps:
    - name: Check all jobs passed
      run: |
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.security.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ] || \
           [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "❌ Quality gate failed - one or more checks did not pass"
          exit 1
        fi
        echo "✅ Quality gate passed - all checks successful"
